import yaml
from tkinter import *
import roller
import os
from datetime import *


def create_new_faction_list(list_name):
    """
    This function creates a new faction list utilizing the format in
    faction_template.yaml and a setting name input by the GM.
    Args:
        - list_name: name of the faction list
    """
    filepath = (f'./custom_factions/{list_name}.yaml')
    setting_name = list_name.replace(' ', '_').lower()
    with open(filepath, 'w') as f:
        setting_dict = {setting_name: ""}
        f.write(yaml.dump(setting_dict, sort_keys=False))
        return

def create_new_faction(filepath, faction, name,
                       category, tier, hold,
                       fac_description, turf, npcs,
                       notable_assets, quirks, allies,
                       enemies, situation, clocks,
                       clock_name, clock_description, progress, complete):
    """
    This function adds to a new faction to any selected faction list. It
    intakes the filepath variable to select the list, and then appends all
    faction variables to the list in YAML format.
    TODO:
        - [ ] Add error handling if a base faction list is selected somehow
    """
    new_faction = {
        faction: {"name": name, "category": category, "tier": tier, "hold": hold,
    "description": fac_description, "turf": turf, "npcs": npcs, "notable_assets": notable_assets,
    "quirks": quirks, "allies": allies, "enemies": enemies, "situation": situation,
    "clocks": {"clock_name": clock_name, "description": clock_description, "progress": progress,
    "complete": complete}}
    }

    with open(filepath, 'a') as custom:
        yaml.dump(new_faction, custom, sort_keys=False)
    return

def edit_faction(list_name, faction_name):
    """
    This function edits a faction in an existing faction list.
    NOTE: This may have to be edited as the GUI develops into
    two separate functions.
    Args:
        - list_name: the faction list to be edited
        - faction_name: the faction to be edited
    """
    return

def create_setting(setting_name):
    """
    This function is called by the create_setting_dialog function
    and the create_setting main window option to allow
    the GM to create a custom setting for a new campaign
    """
    return

# This function is used to start a new Campaign
def new_campaign(setting, campaign_name):
    """
    This function creates a new campaign from the given setting
    Args:
        - setting
        - campaign_name
    """
    # Loads the variables passed to this function as the filepaths
    save_file_template = 'save_files/save_template.yaml'
    base_faction_list = './default_factions/' + setting + '.yaml'
    save_file = './save_files/' + campaign_name + '_1.yaml'

    """
    1. Open template save file
    2. Dump to dictionary
    3. Write campaign_name to dictionary, key "campaign"
    4. Write save_date to dictionary, key "date"
    """
    with open(save_file_template, 'r') as stream:
        save_info = yaml.safe_load(stream)
        save_number = 1
        save_date = datetime.now()
        save_name = campaign_name
        save_info["save"]["save_number"] = save_number
        save_info["save"]["campaign"] = save_name
        save_info["save"]["date"] = save_date.strftime("%Y-%m-%d %H:%M:%S")
        with open(save_file, 'w') as save:
            yaml.safe_dump(save_info, save, sort_keys=False)

    # Copies the content into a NEW save
    with open(save_file, 'a') as save, open(base_faction_list, 'r') as base:
        save.write('\n')
        save.write(base.read())

# This function is used to load a Campaign
def load_campaign(campaign_name):
    """
    Intakes the selected campaign name, pulls up the save file,
    and loads it into a dictionary for reference during the current
    session.
    Args:
        - campaign_name
    Returns:
        - a dictionary as 'current_game'
    """
    filepath = f'./save_files/{campaign_name}.yaml'
    with open(filepath, 'r') as file:
        current_game = yaml.safe_load(file)
        return current_game

def run_advancement(current_game):
    """
    Uses the current_game dictionary in combination with
    the roller.py script generate faction advancement results
    1. Load current_game into a variable
    2. Iterate over current_game to
        1. Grab the tier of each faction
        2. Call roller.py with that tier
        3. Place the results of roller.py into the progress value
        4. AND create a new save file or update the save file
    3. Return the advancement values of each faction
    4. Mark downtime
    Args
        - current_game: generated by calling the load_campaign function
    Returns:
        - Faction advancement results which are then appended as an integer value
        to ["factions"]["<faction_name>"]["clocks"]["<clock_name>"]["progress"] key
    TODO:
        - [ ] Add an algorithm to mark downtime after advancement has been run
        - [ ] Have this function call the story_generator.py script to generate
        progress prompts via ChatGPT
    """
    # 1: Load current_game into a variable
    faction_list = current_game

    # 2.1: Iterate over variable to grab the name key and tier value of each faction
    for faction_name in faction_list["factions"]:
        current_faction_name = faction_name
        current_faction_tier = faction_list["factions"][faction_name]["tier"]

        # 2.2: call roller.py with the tier value of each faction
        advancement_result = roller.roll_dice(current_faction_tier)

        # 2.3: place advancement_result into current_game under "progress" key
        current_game["factions"][current_faction_name]["clocks"]["clock_name"]["progress"] += advancement_result

        # 2.4: update current save or create new one
        # This portion of the function will be built dependent
        # on later design choices

        # 3: return the advancement result
        return advancement_result

    # 4: Mark downtime
    current_game["downtime"] += 1

def manual_advancement(faction, clock, advancement, current_game):
    """
    This function will intake input from the GM as `faction`,
    the clock they want to advance, and the number of ticks
    they want to advance by, and then parse it to the current_game
    dictionary and update that specific entry.
    Args:
        - faction: faction selected by the GM
        - clcok: the clock the GM wants to advance
        - advancement: the number of ticks the GM wants to progress or regress the clock by
        - current_game: generated by calling the load_campaign function
    """
    return

def save_campaign(current_game):
    """
    This function creates a new YAML file with the current game data,
    timestamp, and save number.
    Args:
        - current_game: generated by calling the load_campaign function
    1. Open new save file and look at current_game variable
    2. Increment save number
    3. Create a new save file
    4. Place metadeta into save file
    5. Dump current_game faction states into save file
    6. Save the file
    """
    new_save_info = current_game
    save_date = datetime.now()
    new_save_info["save"]["save_number"] += 1
    new_save_info["save"]["date"] = save_date.strftime("%Y-%m-%d %H:%M:%S")
    new_save_filepath = f'./save_files/{new_save_info["save"]["campaign"]}_{new_save_info["save"]["save_number"]}.yaml'
    with open(new_save_filepath, 'w') as save:
        save.write(yaml.dump(new_save_info, sort_keys=False))

# This function will be used to access program settings
def settings():
    return

def export_faction_list():
    return

def import_faction_list():
    return

def start_campaign():
    return

def default_setting_dialog():
    def yes_action():
        dialog.destroy()
        create_custom_campaign_dialog()

    def no_action():
        dialog.destroy()
        create_campaign_dialog()

    dialog = Toplevel(root)
    dialog.title("Campaign Setting")
    dialog.geometry("200x100")

    Label(dialog, text="Do you want to use a custom setting?").pack(pady=10)

    yes_button = Button(dialog, text="Yes", command=yes_action)
    yes_button.pack(side="left",pady=10, padx=10)
    no_button = Button(dialog, text="No", command=no_action)
    no_button.pack(side="right",pady=10, padx=10)

def create_campaign_dialog():
    """
    This function is called by the New Campaign
    button and creates a new YAML file with entered
    campaign data
    """
    dialog = Toplevel(root)
    dialog.title("Create New Campaign")
    dialog.geometry("200x200")

    Label(dialog, text="Campaign Name:").pack()
    campaign_entry = Entry(dialog)
    campaign_entry.pack()

    Label(dialog, text="Setting:").pack()
    setting_options = ["Blades in the Dark", "Scum & Villainy"]
    clicked = StringVar()
    clicked.set("Blades in the Dark")
    setting_entry = OptionMenu(dialog, clicked, *setting_options)
    setting_entry.pack()

    # more complex lambda
    if clicked.get() == "Blades in the Dark":
        campaign_setting = "blades_in_the_dark"
    elif clicked.get() == "Scum & Villainy":
        campaign_setting = "scum_and_villainy"
    ok_button = Button(dialog, text="Ok", command=lambda: new_campaign(campaign_setting,campaign_entry.get()))
    ok_button.pack(pady=10)

def create_custom_campaign_dialog():
    """
    This function is used to create a new custom campaign.

    TODO:
      - [ ]  Pass campaign_entry to new_campaign
      - [ ]  Pass setting_entry to new_campaign
    """
    dialog = Toplevel(root)
    dialog.title("Create Custom Campaign")
    dialog.geometry("200x200")

    Label(dialog, text="Campaign Name:").pack()
    campaign_entry = Entry(dialog)
    campaign_entry.pack()

    Label(dialog, text="Setting Name:").pack()
    setting_entry = Entry(dialog)
    setting_entry.pack()

    """
    1. Call create_new_faction_list to make a new yaml in ./custom_factions/
    2. Call create_setting_dialog to edit that new yaml
    3. Save the empty faction list as a save file
    4. create_setting function saves over that when called by create_setting_dialog
    """
    ok_button = Button(dialog, text="Ok",command=lambda: create_new_faction_list(setting_entry.get(),campaign_entry.get()))
    ok_button.pack(pady=10)

def create_setting_dialog():
    """
    This function is called by create_custom_campaign_dialog after it
    calls create_new_faction_list to make a new yaml in ./custom_factions/
    This function will open up a series of input boxes that will be used to parse strings
    to create_new_faction which will in turn parse to the save file in ./custom_factions/.

    When this dialog has run its course, it will parse the entirety of that custom faction
    list to the save created by 'create_custom_campaign_dialog' and call the start_campaign function.
    """
    dialog = Toplevel(root)
    dialog.title("Create Setting")
    dialog.geometry("200x400")

    return

def load_campaign_dialog():
    """
    This function is called by the Load Campaign
    button and accesses the appropriate YAML file
    campaign data

    TODO:
      - [ ]  for loop to acquire campaign names returns 'None' to list. Add error handling to exclude template files
    """
    dialog = Toplevel(root)
    dialog.title("Load Campaign")
    dialog.geometry("200x200")

    # use os to walk the save_files dir
    # and PyYaml to grab the "campaign" value
    saves = []
    for files in os.listdir("./save_files/"):
        with open(f"./save_files/{files}", 'r') as f:
            campaign = yaml.safe_load(f)
            saves.append(campaign["save"]["campaign"])

    Label(dialog, text="Campaign Name:").pack()
    saved_campaigns = saves
    clicked = StringVar()
    clicked.set(saved_campaigns[0])
    selected_campaign = OptionMenu(dialog, clicked, *saved_campaigns)
    selected_campaign.pack()

    button = Button(dialog, text="Load Campaign",command=lambda: load_campaign(clicked.get()))
    button.pack(pady=10)

"""
The below code initializes the main window 
of the app using tkinter and initializes
an instance of the game.
"""
root = Tk()
root.title("Forged Factions")
root.geometry("800x800")

# Left side button frame
left_frame = Frame(root)
left_frame.pack(side="left", fill="y")

# New Campaign Button
new_campaign_button = Button(left_frame, text="New Campaign", command=default_setting_dialog)
new_campaign_button.pack(pady=5)

# Load Campaign Button
load_campaign_button = Button(left_frame, text="Load Campaign", command=load_campaign_dialog)
load_campaign_button.pack(pady=5)

# Create Setting Button
create_setting_button = Button(left_frame, text="Create Setting", command=create_setting_dialog)
create_setting_button.pack(pady=5)

# Settings Button
settings_button = Button(left_frame, text="Settings", command=settings)
settings_button.pack(pady=5)

# Center scrollable listbox for factions
faction_list = Listbox(root)
faction_scrollbar = Scrollbar(root, orient="vertical", command=faction_list.yview)
faction_list.config(yscrollcommand=faction_scrollbar.set)
faction_scrollbar.pack(side="right", fill="y")
faction_list.pack(fill="both", expand=True)

# Right side button frame
right_frame = Frame(root)
right_frame.pack(side="right", fill="y")

# Run Advancement Button
run_advancement_button = Button(right_frame, text="Run Advancement", command=run_advancement)
run_advancement_button.pack(pady=5)

# Create New Faction Button
create_new_faction_button = Button(right_frame, text="Create New Faction", command=create_new_faction)
create_new_faction_button.pack(pady=5)

# Edit Faction Button
edit_faction_button = Button(right_frame, text="Edit Faction", command=edit_faction)
edit_faction_button.pack(pady=5)

root.mainloop()