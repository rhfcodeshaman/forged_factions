import yaml
import shutil
import os
from datetime import date
from tkinter import *
import roller.py


def create_new_faction_list()
    return

def create_new_faction()
    return

# This function is used to start a new Campaign
def new_campaign(setting, campaign_name):
    """
    This function creates a new campaign from the given setting
    Args:
        - setting
        - campaign_name
    TODO:
        - Add a downtime tracker to the save file YAML
    """
    # Loads the variables passed to this function as the filepaths
    save_file_template = 'save_files/save_template.yaml'
    base_faction_list = './default_factions/' + setting + '.yaml'
    save_file = './save_files/' + campaign_name + '.yaml'

    """
    1. Open template save file
    2. Dump to dictionary
    3. Write campaign_name to dictionary, key "campaign"
    4. Write save_date to dictionary, key "date"
    """
    with open(save_file_template, 'r') as stream:
        save_info = yaml.safe_load(stream)
        save_date = datetime.now()
        save_name = campaign_name
        save_info["save"]["campaign"] = save_name
        save_info["save"]["date"] = save_date.strftime("%Y-%m-%d %H:%M:%S")
        with open(save_file, 'w') as save:
            yaml.safe_dump(save_info, save)

    # Copies the content into a NEW save
    with open(save_file, 'a') as save, open(base_faction_list, 'r') as base:
        save.write('\n')
        save.write(base.read())

# This function is used to load a Campaign
def load_campaign(campaign_name):
    """
    Intakes the selected campaign name, pulls up the save file,
    and loads it into a dictionary for reference during the current
    session.
    Args:
        - campaign_name
    Returns:
        - a dictionary as 'current_game'
    """
    filepath = f'./save_files/{campaign_name}.yaml'
    with open(filepath, 'r') as file:
        current_game = yaml.safe_load(file)
        return current_game

def edit_faction():
    return

def create_campaign_dialog():
    """
    This function is called by the Create Campaign
    button and creates a new YAML file with entered
    campaign data
    """
    return

def load_campaign_dialog():
    """
    This function is called by the Load Campaign
    button and accesses the appropriate YAML file
    campaign data
    """
    return

def run_advancement(current_game):
    """
    Uses the current_game dictionary in combination with
    the roller.py script generate faction advancement results
    1. Load current_game into a variable
    2. Iterate over current_game to
        1. Grab the tier of each faction
        2. Call roller.py with that tier
        3. Place the results of roller.py into the progress value
        4. AND create a new save file or update the save file
    3. Return the advancement values of each faction
    Args
        - current_game: generated by calling the load_campaign function
    Returns:
        - Faction advancement results which are then appended as an integer value
        to ["factions"]["<faction_name>"]["clocks"]["<clock_name>"]["progress"] key
    TODO:
        - Add an algorithm to mark downtime after advancement has been run
        - Have this function call the story_generator.py script to generate
        progress prompts via ChatGPT
    """
    # 1: Load current_game into a variable
    faction_list = current_game

    # 2.1: Iterate over variable to grab the name key and tier value of each faction
    for faction_name in faction_list["factions"]:
        current_faction_name = faction_name
        current_faction_tier = faction_list["factions"][faction_name]["tier"]

        # 2.2: call roller.py with the tier value of each faction
        advancement_result = roller.roll_dice(current_faction_tier)

        # 2.3: place advancement_result into current_game under "progress" key
        faction_list["factions"][current_faction_name]["situation"]["clocks"]["clock_name"]["progress"] += advancement_result

        # 2.4: update current save or create new one
        # This portion of the function will be built dependent
        # on later design choices

        # 3: return the advancement result
        return advancement_result

def manual_advancement(factions):
    return

def save_campaign():
    return

# This function will be used to access program settings
def settings():
    return

def export():
    return

def import()
    return

"""
The below code initializes the main window 
of the app using tkinter and initializes
an instance of Game.
"""
root = Tk()
root.title("Forged Factions")
root.geometry("800x800")

# Left side button frame
left_frame = Frame(root)
left_frame.pack(side="left", fill="y")

# New Campaign Button
new_campaign_button = Button(left_frame, text="New Campaign", command=new_campaign)
new_campaign_button.pack(pady=5)

# Load Campaign Button
load_campaign_button = Button(left_frame, text="Load Campaign", command=load_campaign)
load_campaign_button.pack(pady=5)

# Settings Button
settings_button = Button(left_frame, text="Settings", command=settings)
settings_button.pack(pady=5)

# Center scrollable listbox for factions
faction_list = Listbox(root)
faction_scrollbar = Scrollbar(root, orient="vertical", command=faction_list.yview)
faction_list.config(yscrollcommand=faction_scrollbar.set)
faction_scrollbar.pack(side="right", fill="y")
faction_list.pack(fill="both", expand=True)

# Right side button frame
right_frame = Frame(root)
right_frame.pack(side="right", fill="y")

# Run Advancement Button
run_advancement_button = Button(right_frame, text="Run Advancement", command=run_advancement)
run_advancement_button.pack(pady=5)

# Create New Faction Button
# create_new_faction_button = Button(right_frame, text="Create New Faction", command=create_new_faction)
# create_new_faction_button.pack(pady=5)
#
# # Edit Faction Button
# edit_faction_button = Button(right_frame, text="Edit Faction", command=edit_faction)
# edit_faction_button.pack(pady=5)

root.mainloop()